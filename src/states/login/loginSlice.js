/**
 *----------------------------@mit----------------------------
 * This is the login slice that will responsible for
 * handling user login and managing it's state.
 * -----------------------------------------------------------
 */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { loginUser, getAccessToken } from './apis';


/**
 * Initial userSlice State
 */
const initialState = {
    token: {},
    status: 'idle',
    error: null,
};


/**
 * @description: Function to handle the async request to login the user
 * @param {string} email
 * @param {string} password
 * @returns {Promise}
 */
export const loginUserAsync = createAsyncThunk(
    'login/loginUser',
    async (credentials) => {
        const response = await loginUser(credentials);
        return response.data;
    }
);


/**
 * @description: Function to handle the async request to get the access token
 * @param {string} token
 * @returns {Promise}
 */
export const getAccessTokenAsync = createAsyncThunk(
    'login/getAccessToken',
    async (token) => {
        const response = await getAccessToken(token);
        return response.data;
    }
);


/**
 * @description: Creating loginSice to handle the login state
 */
const loginSlice = createSlice({
    name: 'login',
    initialState,
    reducers: {
    },
    // lets handle actions generated by createAsyncThunk or in other slices.
    // with the extra reducers
    extraReducers: (builder) => {
        builder
            .addCase(loginUserAsync.pending, (state) => {
                console.log('logigging in');
                state.status = 'logging-in';
            })
            .addCase(loginUserAsync.fulfilled, (state, action) => {
                console.log(action.payload);
                state.status = 'login-success';
                state.token = action.payload.data.token;
                localStorage.setItem('access_token', state.token.access);
                localStorage.setItem('refresh_token', state.token.refresh);
            })
            .addCase(loginUserAsync.rejected, (state, action) => {
                state.status = 'login-failed';
                state.error = action.error.message;
            })
            .addCase(getAccessTokenAsync.pending, (state) => {
                state.status = 'fetching';
            })
            .addCase(getAccessTokenAsync.fulfilled, (state, action) => {
                state.status = 'fetched';
                state.token = action.payload;
            })
            .addCase(getAccessTokenAsync.rejected, (state, action) => {
                state.status = 'fetch-failed';
                state.error = action.error.message;
            });
    }
});



/**
 * This will be used to select the value from the state in the component using the loginSlice
 * @param {*} state 
 * @returns 
 */
export const selectToken = (state) => state.login.token;
export const selectLoginStatus = (state) => state.login.status;
export const selectLoginError = (state) => state.login.error;

/**
 * FInally Exporting the reducer from the loginSlice
 */
export default loginSlice.reducer; 